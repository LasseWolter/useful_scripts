# VIM 
alias vi=nvim
alias init-lua='vi ~/.config/nvim/init.lua'

# Apt
alias upup='sudo apt update -y && sudo apt upgrade'

# GIT
# git checkout using fzf
gch() {
 git checkout "$(git branch | fzf| tr -d '[:space:]')"
}
gcha() {
 git checkout "$(git branch --all | fzf| tr -d '[:space:]')"
}
alias gco='git checkout'
alias gs='git status'
alias ga='git add'
alias gaa='git add -A'
alias gd='git diff'
alias gdc='git diff --cached'
alias gl="git log --pretty='%C(yellow)%h %C(cyan)%cd %Cblue%aN%C(auto)%d %Creset%s' --graph --date=relative --date-order -n8"
alias gll="git log --pretty='%C(yellow)%h %C(cyan)%cd %Cblue%aN%C(auto)%d %Creset%s' --graph --date=relative --date-order"
alias glc='git log --format="%B"'
alias gco='git checkout'
alias gcm='git commit'
alias gsl='git stash list'

alias gcl='git config --list'
alias gcll=gitLocalConfigs

# Can only be used if github CLI (gh) is installed
alias ghid='gh issue develop'
alias ghpr='gh pr create'

restoreMatching() {
    git restore $(find . -name "$1" | grep -v 'node_modules')
}

restoreRegex() {
    git restore $(find . -name "*$1*" | grep -v 'node_modules')
}

gitLocalConfigs() {
    echo "===================LOCAL CONFIG====================";
    git config --list --local;
    echo "===================LOCAL CONFIG====================";
}
gitRmBranchesNotOnRemote() {
    git fetch -p && for branch in $(git for-each-ref --format '%(refname) %(upstream:track)' refs/heads | awk '$2 == "[gone]" {sub("refs/heads/", "", $1); print $1}'); do git branch -D $branch; done
}

# Grep
# [H]eader grep which always prints the first line - handy for tables where the first line contains column names
hgrep() {
    awk -v pattern="$1" 'NR==1 || $0 ~ pattern' | grep -B1 $1
}

# K8
alias k=kubectl
alias kns=kubens # requires kubens to be installed
alias ktx=kubectx # requires kubens to be installed
alias khw='k get hw | hgrep'

knary() {
    NAMESPACE="${2:-prod}"
    CMD="kubectl get canaries $1 -n $NAMESPACE -w"
    echo "$CMD\n"
    eval "$CMD"
}

koward() {
    NAMESPACE="${2:-prod}"
    PORT="${3:-5000}"
    CMD="kubectl port-forward deployment/$1 8080:$PORT -n $NAMESPACE"
    echo "$CMD\n"
    (sleep 1; zen http://localhost:8080/swagger)&
    eval "$CMD"
}

alias rmVimSwp='rm -r ~/.local/state/nvim/swap/*'

alias ls='ls -F --color=auto'
alias ll='ls -lha --color=auto'
alias la='ls -a --color=auto'


# diff side by side with colour
alias diff-colour='diff -y --color=always'

alias tmuxconf='vi ~/.config/tmux/tmux.conf'
alias zshrc='vi ~/.zshrc && source ~/.zshrc'
alias bashrc='vi ~/.bashrc && source ~/.bashrc'
alias bash_aliases='vi ~/.bash_aliases && source ~/.bash_aliases'
alias local_bash_aliases='vi ~/.local_bash_aliases && source ~/.local_bash_aliases'

alias tmr="tmux rename-window"

# Display file size and sort by it
alias lt='du -sh * | sort -h'


alias xcc='xclip -select clipboard'
# alias xcc='pbcopy' # for mac add this to your local_bash_aliases

# LANGUAGE SPECIFIC
# .NET
alias rmBinObj='find . -not \( -path "*/node_modules/*" \) -iname bin -o -iname obj | xargs rm -rf'
# only works if csharprepl has been installed: https://github.com/waf/CSharpRepl?tab=readme-ov-file
alias csi=csharprepl

# PYTHON
alias vac='source $(find -name "*venv")/bin/activate'

# Create this file for local aliases that shouldn't be shared/are not compatible across machines
# Everything defined in that file will overwrite aliases in this file
source ~/.local_bash_aliases

# Examples for local aliases

# If you have ugrep installed
# Use ugrep instead of grep - add to local_bash_aliases if you have ugrep installed
# alias grep=ugrep
# alias igrep='ugrep --query=1 --smart-case' # allows interactive searching
